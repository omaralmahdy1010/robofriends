{"version":3,"sources":["components/Cards.js","components/CardList.js","components/SearchBox.js","otakus.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Cards","id","name","email","className","alt","src","CardList","otakus","map","user","i","key","Searchbox","searchChange","type","placeholder","onChange","username","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","this","filterdOtakus","filter","otaku","toLowerCase","includes","SearchBox","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4NAaeA,EAXD,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACtB,OACI,yBAAKC,UAAU,kDACV,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,EAA1B,cAC1B,6BACI,4BAAKC,GACL,2BAAIC,MCSDI,EAdE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BACMA,EAAOC,KAAI,SAACC,EAAMC,GACxB,OAAQ,kBAAC,EAAD,CACRC,IAAKD,EACJV,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCEXU,EAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAW,UACZ,2BAAOA,UAAW,mCAAmCW,KAAK,SAC1DC,YAAY,gBACZC,SAAYH,MC+BTN,EAtCO,CACpB,CACEP,GAAI,EACJC,KAAM,SACNgB,SAAU,iBACVf,MAAO,uBAET,CACEF,GAAI,EACJC,KAAM,SACNgB,SAAU,iBACVf,MAAO,uBAET,CACEF,GAAI,EACJC,KAAM,SACNgB,SAAU,iBACVf,MAAO,uBAET,CACEF,GAAI,EACJC,KAAM,OACNgB,SAAU,eACVf,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,aACNgB,SAAU,oBACVf,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,gBACNgB,SAAU,kBACVf,MAAO,8BCzBIgB,EARA,SAACC,GACZ,OACI,yBAAKC,MAAQ,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCsCJC,G,8DAlCX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAPxC,EAAKC,MAAQ,CACTzB,OAAQA,EACRsB,YAAa,IAJP,E,qDAeL,IAAD,EAC4BI,KAAKD,MAA7BzB,EADJ,EACIA,OAAQsB,EADZ,EACYA,YACVK,EAAgB3B,EAAO4B,QAAO,SAAAC,GAChC,OAAOA,EAAMnC,KAAKoC,cAAcC,SAAST,EAAYQ,kBAEzD,OAEI,6BACA,wBAAIlC,UAAU,SAAd,eACA,kBAACoC,EAAD,CAAW1B,aAAeoB,KAAKP,iBAC/B,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUnB,OAAS2B,U,GA3BbM,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7208b81f.chunk.js","sourcesContent":["import React from 'react';\n\nconst Cards = ({id, name, email}) => {\n    return(\n        <div className='tc bg-light-blue dib pa3 ma2 grow bw2 shadow-5'>\n             <img alt='robots' src={`https://robohash.org/${id}?200x200`}/>\n        <div>\n            <h2>{name}</h2>\n            <p>{email}</p>\n        </div>\n        </div>\n    )\n}\nexport default Cards;","import React from \"react\";\nimport Cards from './Cards';\n\nconst CardList = ( {otakus }) => {\n    return(\n        <div>\n            { otakus.map((user, i) => {\n        return( <Cards\n        key={i}\n         id={otakus[i].id}\n         name={otakus[i].name} \n         email={otakus[i].email}/>\n        )\n    })}\n        </div>\n    );\n}\nexport default CardList;","import React from 'react';\n\nconst Searchbox = ({searchChange}) => {\n    return (\n        <div className= \"tc pa2\">\n            <input className= 'pa3 ba b--green bg-lightest-blue' type=\"search\" \n            placeholder='Search Robots'\n            onChange = {searchChange}/>\n            \n        </div>\n    );\n}\n\nexport default Searchbox;","export const otakus = [\n  {\n    id: 1,\n    name: \"Alluka\",\n    username: \"AllukaX08 SAMA\",\n    email: \"AllukaX08@gmail.com\"\n  },\n  {\n    id: 2,\n    name: \"Sasuke\",\n    username: \"SasukeX08 SAMA\",\n    email: \"SasukeX08@gmail.com\"\n  },\n  {\n    id: 3,\n    name: \"Zentsu\",\n    username: \"ZentsuX08 SAMA\",\n    email: \"ZentsuX08@gmail.com\"\n  },\n  {\n    id: 4,\n    name: \"Giyu\",\n    username: \"GiyuX08 SAMA\",\n    email: \"GiyuX08@gmail.com\"\n  },\n  {\n    id: 5,\n    name: \"not Sakura\",\n    username: \"notSakuraX08 SAMA\",\n    email: \"notSakuraX08@gmail.com\"\n  },\n  {\n    id: 6,\n    name: \"Potato Senpai\",\n    username: \"PotatoSenpaiX08\",\n    email: \"PotatoSenpaiX08@gmail.com\"\n  }\n]\nexport default otakus;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style= {{ overflowY: 'scroll', border: '5px solid balck', height: '500px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, {Component} from 'react';\nimport CardList from '../components/CardList.js';\nimport SearchBox from '../components/SearchBox.js'\nimport otakus from '../otakus.js'\nimport Scroll from '../components/Scroll.js'\nimport '../index.css';\nimport './App.css';\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            otakus: otakus,\n            searchfield: ''\n        }\n    }\n\n    onSearchChange = (event) => {\n      this.setState({ searchfield: event.target.value})\n       \n    }\n\n\n\n    render(){\n        const { otakus, searchfield } = this.state\n        const filterdOtakus = otakus.filter(otaku => {\n            return otaku.name.toLowerCase().includes(searchfield.toLowerCase())\n        });\n        return ( \n            \n            <div>\n            <h1 className=\"tc f1\">RoboFriends</h1>\n            <SearchBox searchChange ={this.onSearchChange} />\n            <Scroll>\n            <CardList otakus= {filterdOtakus}/>\n            </Scroll>\n            </div>\n            );\n    }\n    \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import Cards from './Cards.js';\n\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}